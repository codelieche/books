[client]
port    = 3306
socket  = /var/run/mysqld/mysqld.sock
# default-character-set   = utf8


[mysqldump]
quick
quote-names
max_allowed_packet    = 16M

[mysqld]
pid-file      = /var/run/mysqld/mysqld.pid
socket        = /var/run/mysqld/mysqld.sock
datadir       = /var/lib/mysql
#log-error    = /var/log/mysql/error.log
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

# docker.cnf
skip-host-cache
skip-name-resolve

# 以下是自定义添加的配置
###############    Inodb Parameter      ###############
innodb_buffer_pool_size           = 8G          # 缓存池大小

innodb_buffer_pool_instances      = 8           # 适用于每2G分配一个pool
innodb_log_files_in_group         = 2           # 重做日志(redo log)个数
innodb_log_file_size              = 32M         # 重做日志(redo log)大小
innodb_log_buffer_size            = 4M          # 重做日志(redo log)缓存大小
innodb_flush_log_at_trx_commit    = 1           # 每提交一个事物，刷新到重做日志(redo log)文件
innodb_flush_method               = O_DIRECT    # 数据文件通过innod缓存刷盘，日志文件通过OS缓存刷盘
innodb_max_dirty_pages_pct        = 75          # innodb数据页中脏页的占比
innodb_adaptive_flushing          = 1           # 开启自适应刷新脏页
innodb_read_io_threads            = 8           # innoddb读线程个数
innodb_write_io_threads           = 8           # innoddb写线程个数
innodb_purge_threads              = 1           # innodb 清除线程个数
innodb_io_capacity                = 400         # IOPS
innodb_io_capacity_max            = 4000        # 最大IOPS
innodb_change_buffering           = all         # 开启插入/删除,更新合并缓存
innodb_file_per_table             = 1           # 开启独立表空间
innodb_print_all_deadlocks         = 1          # 保存死锁日志

###############     Cache Parameter      ###############
key_buffer_size                 = 128M        # myisam引擎缓存大小
sort_buffer_size                = 8M          # 排序缓存大小
myisam_sort_buffer_size         = 8M          # myisam排序大小
join_buffer_size                = 8M          # 连接查询缓存大小
thread_stack                    = 256K        # 线程申请的内存堆栈大小
thread_cache_size               = 128         # 线程池缓存的线程数
table_open_cache                = 2049        # 打开表高速缓存

binlog_cache_size               = 128K        # 如事务繁忙建议调大该值，根据show global status like 'bin%';
binlog_stmt_cache_size          = 32K         # 适用于非事务语句，比如select
tmp_table_size                  = 128M        # 临时表适用于排序，迁移
max_heap_table_size             = 128M        # 用户可创建的最大临时表
read_buffer_size                = 16M         # 顺序读缓存大小
read_rnd_buffer_size            = 32M         # 随机度缓存大小

###############       Log Parameter       ###############
long_query_time                 = 5                   # 慢查询时间阈值
#log_queries_not_using_indexes  = 1                   # 未使用索引
slow_query_log_file             = mysql-slow.log      # 慢查询日志名
slow_query_log                  = ON                  # 开启慢查询
log_bin                         = mysql-bin.log       # 二进制日志名 /var/log/mysql/mysql-bin.log 
binlog_format                   = ROW                 # 如无其他考虑采用行格式
expire_logs_days                = 3                   # 二进制日志过期期限3天
max_binlog_size                 = 100M                # 二进制日志大小
# log_output                    = file                # 慢查询记录到表
log_output                      = table               # 慢查询记录到表

###############       Other Parameter      ###############
server_id = 20191203
character_set_server            = utf8              # 字符集
interactive_timeout             = 300               # 客户端交互超时时间
wait_timeout                    = 300               # 数据源(jdbc)交互超时时间
innodb_lock_wait_timeout        = 60                # innodb锁等待时间
lock_wait_timeout               = 60                # 元数据锁等待时间
max_connections                 = 1000              # 最大连接数
max_allowed_packet              = 32M               # 允许的数据包大小
myisam_recover_options          = BACKUP            # myisam恢复模式
tmpdir                          = /tmp              # 临时目录
skip_name_resolve               = ON                # 跳过域名解析
innodb_open_files               = 10240             # 允许innodb备份时打开的文件数
event_scheduler                 = 1                 # 开启计划任务
log_bin_trust_function_creators = 1                 # 信任创建存储过程拥有这操作，复制同步创建
